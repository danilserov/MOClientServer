п.1, а.3: "Клиент представляет собой класс отправляющий команды с исходными данными на сервер для обработки и 
возвращающий результаты выполнения. Задача клиента — инкапсуляция взаимодействия с сервером таким образом, 
что управляющий алгоритм «не знает» о сервере и способе взаимодействия с ним. 
Т.е. управляющий алгоритм использует API клиента для выполнения команд вызывая соответствующие функции,
передавая исходные данные и получая результаты."

Т.е. предполагается следующее использование (синхронный вариант), например:
double sin_x = client.Sin(45);
double cos_x = client.Cos(60);

Асинхронный вариант:
int sin_id = client.SinAsync(45);
int cos_id = client.CosAsync(60);
...
double sin_x = client.GetResult(sin_id);
double cos_x = client.GetResult(cos_id);

При этом сами вычисления осуществляются на сервере.

"общие требования", деф. 2:
"программные интерфейсы клиента и сервера должны быть независимы друг от друга, т. е. допускать возможность создания
отдельных приложений для клиента и сервера..."
Сервер не может использовать API клиента (даже в виде подписчика) для выполнения команды. Клиент должен отправить 
данные на сервер (команда + ИД для расчёта)

"сервер должен обеспечивать", деф.3:
"сохранение результатов выполнения команды до момента их получения клиентом..."

"Клиент должен обеспечивать", деф. 1,:
"программный интерфейс для исполнения команд и получения результатов"

"Клиент должен обеспечивать", деф. 5:
"приём результатов выполнения команд от сервера и передача их управляющему алгоритму"

"Управляющий алгоритм (функция main) должен обеспечивать:", деф. 3:
"отправку заданного количества команд различных типов каждым клиентом в синхронном и асинхронном режимах"

"Управляющий алгоритм (функция main) должен обеспечивать:", деф. 4:
"получение результатов всех команд"