Тестовое задание на многопоточность

	1. Необходимо разработать консольное приложение реализующее клиент-серверное взаимодействие.
	Сервер представляет собой класс принимающий команды (запросы) от клиентов и исполняющий их в параллельном режиме. Перечень команд известен серверу. Каждой команде соответствует нагрузочный алгоритм (любой) имитирующий длительную операцию (время выполнения намного больше времени приёма). Результат выполнения команды клиент получает в асинхронном режиме, т. е. сервер готов к приёму очередной команды от клиента до окончания выполнения предыдущей.
	Клиент представляет собой класс отправляющий команды с исходными данными на сервер для обработки и возвращающий результаты выполнения. Задача клиента — инкапсуляция взаимодействия с сервером таким образом, что управляющий алгоритм «не знает» о сервере и способе взаимодействия с ним. Т.е. управляющий алгоритм использует API клиента для выполнения команд вызывая соответствующие функции, передавая исходные данные и получая результаты.

	Общие требования:
– взаимодействие клиента и сервера должно осуществляться межпоточным способом;
– программные интерфейсы клиента и сервера должны быть независимы друг от друга, т. е. допускать возможность создания отдельных приложений для клиента и сервера (с использованием межпроцессного или сетевого взаимодействия — реализовывать не нужно);
– программные интерфейсы клиента и сервера должны быть простыми и удобными в использовании (вся сложность взаимодействия должна быть инкапсулирована).

	Сервер должен обеспечивать:
– работу со множеством клиентов;
– высокую доступность (минимальное время на приём команды с исходными данными);
– сохранение результатов выполнения команды до момента их получения клиентом (способ передачи результатов — по инициативе сервера или клиента — на Ваше усмотрение);
– исполнение команд в параллельных потоках с заданным количеством;
– приём и исполнение команд всегда асинхронные.

	Клиент должен обеспечивать:
– программный интерфейс для исполнения команд и получения результатов;
– высокую доступность (минимальное время на отправку команды с исходными данными);
– асинхронную отправку команд с исходными данными на сервер — отправка очередной команды возможна до завершения выполнения предыдущей;
– синхронную отправку команд с исходными данными на сервер — отправка очередной команды невозможна до завершения выполнения предыдущей;
– приём результатов выполнения команд от сервера и передача их управляющему алгоритму.

	Управляющий алгоритм (функция main) должен обеспечивать:
– создание экземпляра сервера;
– создание заданного количества клиентов;
– отправку заданного количества команд различных типов каждым клиентом в синхронном и асинхронном режимах;
– получение результатов всех команд.

	Ввод и вывод информации(на консоль):
– ввод параметров — на Ваше усмотрение (ввод не должен быть утомительным);
– результат (сервер): количество клиентов, общее количество принятых и исполненных команд, максимальная длительность исполнения для команд каждого типа, время работы приложения с момента запуска команд на исполнение (не учитывать время ручного ввода параметров);

	Требования к среде разработки и выполнения:
– ОС Linux;
– язык С++ стандарта 14;
– компилятор gcc или clang;
– система сборки проекта cmake;


	2. Разработать модульный тест используя фреймворк Google Test, покрывающий один наиболее важный (на Ваш взгляд) алгоритм.

	Критерии качества выполнения тестового задания:
– сборка и выполнение без ошибок и зависаний;
– масштабируемость — большое количество клиентов и команд (в разумных пределах) не должно приводить к зависанию компьютера, исчерпанию памяти;
– простые и удобные программные интерфейсы;
– структурированный код с понятной логикой (чтобы не изучать часами «а как же это работает»);
– лаконичное использование языковых инструментов в объёме требуемом для реализации задания — нет необходимости демонстрировать знания всех возможностей языка программирования.

 	Срок решения на Ваше усмотрение, качество кода важнее скорости выполнения задания.
